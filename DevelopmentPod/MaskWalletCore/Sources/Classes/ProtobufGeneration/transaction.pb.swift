// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: transaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Sign a transaction
public struct Api_SignTransactionParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storedKeyData: Data = Data()

  public var derivationPath: String = String()

  public var password: String = String()

  public var coin: Api_Coin = .ethereum

  public var input: Api_SignTransactionParam.OneOf_Input? = nil

  public var signInput: Ethereum_SignInput {
    get {
      if case .signInput(let v)? = input {return v}
      return Ethereum_SignInput()
    }
    set {input = .signInput(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Input: Equatable {
    case signInput(Ethereum_SignInput)

  #if !swift(>=4.1)
    public static func ==(lhs: Api_SignTransactionParam.OneOf_Input, rhs: Api_SignTransactionParam.OneOf_Input) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.signInput, .signInput): return {
        guard case .signInput(let l) = lhs, case .signInput(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

public struct Api_SignTransactionResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var output: Api_SignTransactionResp.OneOf_Output? = nil

  public var signOutput: Ethereum_SignOutput {
    get {
      if case .signOutput(let v)? = output {return v}
      return Ethereum_SignOutput()
    }
    set {output = .signOutput(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Output: Equatable {
    case signOutput(Ethereum_SignOutput)

  #if !swift(>=4.1)
    public static func ==(lhs: Api_SignTransactionResp.OneOf_Output, rhs: Api_SignTransactionResp.OneOf_Output) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.signOutput, .signOutput): return {
        guard case .signOutput(let l) = lhs, case .signOutput(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_SignTransactionParam: @unchecked Sendable {}
extension Api_SignTransactionParam.OneOf_Input: @unchecked Sendable {}
extension Api_SignTransactionResp: @unchecked Sendable {}
extension Api_SignTransactionResp.OneOf_Output: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api"

extension Api_SignTransactionParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignTransactionParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "storedKeyData"),
    2: .same(proto: "derivationPath"),
    3: .same(proto: "password"),
    4: .same(proto: "coin"),
    5: .standard(proto: "sign_input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.storedKeyData) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.derivationPath) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.coin) }()
      case 5: try {
        var v: Ethereum_SignInput?
        var hadOneofValue = false
        if let current = self.input {
          hadOneofValue = true
          if case .signInput(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.input = .signInput(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.storedKeyData.isEmpty {
      try visitor.visitSingularBytesField(value: self.storedKeyData, fieldNumber: 1)
    }
    if !self.derivationPath.isEmpty {
      try visitor.visitSingularStringField(value: self.derivationPath, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    if self.coin != .ethereum {
      try visitor.visitSingularEnumField(value: self.coin, fieldNumber: 4)
    }
    try { if case .signInput(let v)? = self.input {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_SignTransactionParam, rhs: Api_SignTransactionParam) -> Bool {
    if lhs.storedKeyData != rhs.storedKeyData {return false}
    if lhs.derivationPath != rhs.derivationPath {return false}
    if lhs.password != rhs.password {return false}
    if lhs.coin != rhs.coin {return false}
    if lhs.input != rhs.input {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_SignTransactionResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignTransactionResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sign_output"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Ethereum_SignOutput?
        var hadOneofValue = false
        if let current = self.output {
          hadOneofValue = true
          if case .signOutput(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.output = .signOutput(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .signOutput(let v)? = self.output {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_SignTransactionResp, rhs: Api_SignTransactionResp) -> Bool {
    if lhs.output != rhs.output {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
