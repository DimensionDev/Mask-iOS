// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: post-encryption.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Api_PublicKeyAlgorithm: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ed25519Algr // = 0
  case secp256P1Algr // = 1
  case secp256K1Algr // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .ed25519Algr
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ed25519Algr
    case 1: self = .secp256P1Algr
    case 2: self = .secp256K1Algr
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ed25519Algr: return 0
    case .secp256P1Algr: return 1
    case .secp256K1Algr: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_PublicKeyAlgorithm: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Api_PublicKeyAlgorithm] = [
    .ed25519Algr,
    .secp256P1Algr,
    .secp256K1Algr,
  ]
}

#endif  // swift(>=4.2)

public struct Api_PostEncryptionParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: String = String()

  public var network: String {
    get {return _network ?? String()}
    set {_network = newValue}
  }
  /// Returns true if `network` has been explicitly set.
  public var hasNetwork: Bool {return self._network != nil}
  /// Clears the value of `network`. Subsequent reads from it will return its default value.
  public mutating func clearNetwork() {self._network = nil}

  public var authorPublicKeyData: Data {
    get {return _authorPublicKeyData ?? Data()}
    set {_authorPublicKeyData = newValue}
  }
  /// Returns true if `authorPublicKeyData` has been explicitly set.
  public var hasAuthorPublicKeyData: Bool {return self._authorPublicKeyData != nil}
  /// Clears the value of `authorPublicKeyData`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorPublicKeyData() {self._authorPublicKeyData = nil}

  public var authorUserID: String {
    get {return _authorUserID ?? String()}
    set {_authorUserID = newValue}
  }
  /// Returns true if `authorUserID` has been explicitly set.
  public var hasAuthorUserID: Bool {return self._authorUserID != nil}
  /// Clears the value of `authorUserID`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorUserID() {self._authorUserID = nil}

  public var authorPublicKeyAlgr: Api_PublicKeyAlgorithm {
    get {return _authorPublicKeyAlgr ?? .ed25519Algr}
    set {_authorPublicKeyAlgr = newValue}
  }
  /// Returns true if `authorPublicKeyAlgr` has been explicitly set.
  public var hasAuthorPublicKeyAlgr: Bool {return self._authorPublicKeyAlgr != nil}
  /// Clears the value of `authorPublicKeyAlgr`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorPublicKeyAlgr() {self._authorPublicKeyAlgr = nil}

  public var version: Api_EncryptOption.Version = .v37

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _network: String? = nil
  fileprivate var _authorPublicKeyData: Data? = nil
  fileprivate var _authorUserID: String? = nil
  fileprivate var _authorPublicKeyAlgr: Api_PublicKeyAlgorithm? = nil
}

public struct Api_PostEncrypedResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_PublicKeyAlgorithm: @unchecked Sendable {}
extension Api_PostEncryptionParam: @unchecked Sendable {}
extension Api_PostEncrypedResp: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api"

extension Api_PublicKeyAlgorithm: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Ed25519Algr"),
    1: .same(proto: "Secp256p1Algr"),
    2: .same(proto: "Secp256k1Algr"),
  ]
}

extension Api_PostEncryptionParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostEncryptionParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .same(proto: "network"),
    3: .same(proto: "authorPublicKeyData"),
    4: .same(proto: "authorUserId"),
    5: .same(proto: "authorPublicKeyAlgr"),
    6: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._network) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._authorPublicKeyData) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._authorUserID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._authorPublicKeyAlgr) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    try { if let v = self._network {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._authorPublicKeyData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._authorUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._authorPublicKeyAlgr {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    if self.version != .v37 {
      try visitor.visitSingularEnumField(value: self.version, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_PostEncryptionParam, rhs: Api_PostEncryptionParam) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs._network != rhs._network {return false}
    if lhs._authorPublicKeyData != rhs._authorPublicKeyData {return false}
    if lhs._authorUserID != rhs._authorUserID {return false}
    if lhs._authorPublicKeyAlgr != rhs._authorPublicKeyAlgr {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_PostEncrypedResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostEncrypedResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_PostEncrypedResp, rhs: Api_PostEncrypedResp) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
