// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: base.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Api_Coin: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ethereum // = 0
  case polkadot // = 1
  case solana // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .ethereum
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ethereum
    case 1: self = .polkadot
    case 2: self = .solana
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ethereum: return 0
    case .polkadot: return 1
    case .solana: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Coin: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Api_Coin] = [
    .ethereum,
    .polkadot,
    .solana,
  ]
}

#endif  // swift(>=4.2)

public enum Api_StoredKeyType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case privateKey // = 0
  case mnemonic // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .privateKey
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .privateKey
    case 1: self = .mnemonic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .privateKey: return 0
    case .mnemonic: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_StoredKeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Api_StoredKeyType] = [
    .privateKey,
    .mnemonic,
  ]
}

#endif  // swift(>=4.2)

public enum Api_StoredKeyImportType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case privateKeyImportType // = 0
  case mnemonicImportType // = 1
  case keyStoreJsonimportType // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .privateKeyImportType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .privateKeyImportType
    case 1: self = .mnemonicImportType
    case 2: self = .keyStoreJsonimportType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .privateKeyImportType: return 0
    case .mnemonicImportType: return 1
    case .keyStoreJsonimportType: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_StoredKeyImportType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Api_StoredKeyImportType] = [
    .privateKeyImportType,
    .mnemonicImportType,
    .keyStoreJsonimportType,
  ]
}

#endif  // swift(>=4.2)

public enum Api_StoredKeyExportType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case privateKeyExportType // = 0
  case mnemonicExportType // = 1
  case keyStoreJsonexportType // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .privateKeyExportType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .privateKeyExportType
    case 1: self = .mnemonicExportType
    case 2: self = .keyStoreJsonexportType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .privateKeyExportType: return 0
    case .mnemonicExportType: return 1
    case .keyStoreJsonexportType: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_StoredKeyExportType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Api_StoredKeyExportType] = [
    .privateKeyExportType,
    .mnemonicExportType,
    .keyStoreJsonexportType,
  ]
}

#endif  // swift(>=4.2)

public enum Api_Curve: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case secp256K1 // = 0
  case ed25519 // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .secp256K1
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .secp256K1
    case 1: self = .ed25519
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .secp256K1: return 0
    case .ed25519: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Curve: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Api_Curve] = [
    .secp256K1,
    .ed25519,
  ]
}

#endif  // swift(>=4.2)

public struct Api_StoredKeyInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  /// The unique hash of the StoredKey, users could check whether two StoredKeys are same by comparing the hashes
  public var hash: String = String()

  public var type: Api_StoredKeyType = .privateKey

  /// Raw data of the StoredKey, used in requests required an existing StoredKey
  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_StoredKeyAccountInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var address: String = String()

  public var name: String = String()

  public var derivationPath: String = String()

  /// Coin id
  public var coin: String = String()

  public var extendedPublicKey: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_EncryptOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Api_EncryptOption.Version = .v37

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Version: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case v37 // = 0
    case v38 // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .v37
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .v37
      case 1: self = .v38
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .v37: return 0
      case .v38: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Api_EncryptOption.Version: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Api_EncryptOption.Version] = [
    .v37,
    .v38,
  ]
}

#endif  // swift(>=4.2)

public struct Api_JWK {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var crv: String = String()

  public var ext: Bool = false

  public var x: String = String()

  public var y: String = String()

  public var keyOps: [String] = []

  public var kty: String = String()

  public var d: String {
    get {return _d ?? String()}
    set {_d = newValue}
  }
  /// Returns true if `d` has been explicitly set.
  public var hasD: Bool {return self._d != nil}
  /// Clears the value of `d`. Subsequent reads from it will return its default value.
  public mutating func clearD() {self._d = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _d: String? = nil
}

public struct Api_AesJWK {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var alg: String = String()

  public var ext: Bool = false

  public var k: String = String()

  public var keyOps: [String] = []

  public var kty: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_E2EEncryptParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var localKeyData: Data = Data()

  public var target: Dictionary<String,Data> = [:]

  public var authorPrivateKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Coin: @unchecked Sendable {}
extension Api_StoredKeyType: @unchecked Sendable {}
extension Api_StoredKeyImportType: @unchecked Sendable {}
extension Api_StoredKeyExportType: @unchecked Sendable {}
extension Api_Curve: @unchecked Sendable {}
extension Api_StoredKeyInfo: @unchecked Sendable {}
extension Api_StoredKeyAccountInfo: @unchecked Sendable {}
extension Api_EncryptOption: @unchecked Sendable {}
extension Api_EncryptOption.Version: @unchecked Sendable {}
extension Api_JWK: @unchecked Sendable {}
extension Api_AesJWK: @unchecked Sendable {}
extension Api_E2EEncryptParam: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api"

extension Api_Coin: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Ethereum"),
    1: .same(proto: "Polkadot"),
    2: .same(proto: "Solana"),
  ]
}

extension Api_StoredKeyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PrivateKey"),
    1: .same(proto: "Mnemonic"),
  ]
}

extension Api_StoredKeyImportType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PrivateKeyImportType"),
    1: .same(proto: "MnemonicImportType"),
    2: .same(proto: "KeyStoreJSONImportType"),
  ]
}

extension Api_StoredKeyExportType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PrivateKeyExportType"),
    1: .same(proto: "MnemonicExportType"),
    2: .same(proto: "KeyStoreJSONExportType"),
  ]
}

extension Api_Curve: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Secp256k1"),
    1: .same(proto: "Ed25519"),
  ]
}

extension Api_StoredKeyInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoredKeyInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "hash"),
    3: .same(proto: "type"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 2)
    }
    if self.type != .privateKey {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_StoredKeyInfo, rhs: Api_StoredKeyInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.type != rhs.type {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_StoredKeyAccountInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoredKeyAccountInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "name"),
    3: .same(proto: "derivationPath"),
    4: .same(proto: "coin"),
    5: .same(proto: "extendedPublicKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.derivationPath) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.coin) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.extendedPublicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.derivationPath.isEmpty {
      try visitor.visitSingularStringField(value: self.derivationPath, fieldNumber: 3)
    }
    if !self.coin.isEmpty {
      try visitor.visitSingularStringField(value: self.coin, fieldNumber: 4)
    }
    if !self.extendedPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.extendedPublicKey, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_StoredKeyAccountInfo, rhs: Api_StoredKeyAccountInfo) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.name != rhs.name {return false}
    if lhs.derivationPath != rhs.derivationPath {return false}
    if lhs.coin != rhs.coin {return false}
    if lhs.extendedPublicKey != rhs.extendedPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_EncryptOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptOption"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != .v37 {
      try visitor.visitSingularEnumField(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_EncryptOption, rhs: Api_EncryptOption) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_EncryptOption.Version: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "V37"),
    1: .same(proto: "V38"),
  ]
}

extension Api_JWK: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JWK"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "crv"),
    3: .same(proto: "ext"),
    4: .same(proto: "x"),
    5: .same(proto: "y"),
    6: .standard(proto: "key_ops"),
    7: .same(proto: "kty"),
    8: .same(proto: "d"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.crv) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.ext) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.x) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.y) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.keyOps) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.kty) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._d) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.crv.isEmpty {
      try visitor.visitSingularStringField(value: self.crv, fieldNumber: 1)
    }
    if self.ext != false {
      try visitor.visitSingularBoolField(value: self.ext, fieldNumber: 3)
    }
    if !self.x.isEmpty {
      try visitor.visitSingularStringField(value: self.x, fieldNumber: 4)
    }
    if !self.y.isEmpty {
      try visitor.visitSingularStringField(value: self.y, fieldNumber: 5)
    }
    if !self.keyOps.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keyOps, fieldNumber: 6)
    }
    if !self.kty.isEmpty {
      try visitor.visitSingularStringField(value: self.kty, fieldNumber: 7)
    }
    try { if let v = self._d {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_JWK, rhs: Api_JWK) -> Bool {
    if lhs.crv != rhs.crv {return false}
    if lhs.ext != rhs.ext {return false}
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.keyOps != rhs.keyOps {return false}
    if lhs.kty != rhs.kty {return false}
    if lhs._d != rhs._d {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_AesJWK: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AesJWK"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alg"),
    2: .same(proto: "ext"),
    3: .same(proto: "k"),
    4: .standard(proto: "key_ops"),
    5: .same(proto: "kty"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.alg) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.ext) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.k) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.keyOps) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.kty) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.alg.isEmpty {
      try visitor.visitSingularStringField(value: self.alg, fieldNumber: 1)
    }
    if self.ext != false {
      try visitor.visitSingularBoolField(value: self.ext, fieldNumber: 2)
    }
    if !self.k.isEmpty {
      try visitor.visitSingularStringField(value: self.k, fieldNumber: 3)
    }
    if !self.keyOps.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keyOps, fieldNumber: 4)
    }
    if !self.kty.isEmpty {
      try visitor.visitSingularStringField(value: self.kty, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_AesJWK, rhs: Api_AesJWK) -> Bool {
    if lhs.alg != rhs.alg {return false}
    if lhs.ext != rhs.ext {return false}
    if lhs.k != rhs.k {return false}
    if lhs.keyOps != rhs.keyOps {return false}
    if lhs.kty != rhs.kty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_E2EEncryptParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".E2EEncryptParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "localKeyData"),
    2: .same(proto: "target"),
    3: .same(proto: "authorPrivateKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.localKeyData) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.target) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.authorPrivateKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.localKeyData.isEmpty {
      try visitor.visitSingularBytesField(value: self.localKeyData, fieldNumber: 1)
    }
    if !self.target.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.target, fieldNumber: 2)
    }
    if !self.authorPrivateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.authorPrivateKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_E2EEncryptParam, rhs: Api_E2EEncryptParam) -> Bool {
    if lhs.localKeyData != rhs.localKeyData {return false}
    if lhs.target != rhs.target {return false}
    if lhs.authorPrivateKey != rhs.authorPrivateKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
